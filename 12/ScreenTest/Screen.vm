function Screen.init 1
push constant 0
not
pop static 0
push constant 16
call Array.new 1
pop static 1
push constant 0
push static 1
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 0
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push static 1
add
push constant 2
push local 0
push constant 1
sub
push static 1
add
pop pointer 1
push that 0
call Math.multiply 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen._locationToAddress 0
push constant 16384
push argument 1
push constant 32
call Math.multiply 2
add
push argument 0
push constant 16
call Math.divide 2
add
return
function Screen._colorWord 1
push constant 0
pop local 0
push static 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
pop local 0
label IF_FALSE0
push argument 0
call Memory.peek 1
push argument 1
push local 0
and
or
return
function Screen.clearScreen 1
push static 0
pop local 0
push constant 0
call Screen.setColor 1
pop temp 0
push constant 0
push constant 0
push constant 511
push constant 255
call Output.drawRectangle 4
pop temp 0
push local 0
call Screen.setColor 1
pop temp 0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 3
push argument 0
push argument 1
call Screen._locationToAddress 2
pop local 0
push argument 0
push constant 16
call Math.modulo 2
pop local 1
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
call Screen._colorWord 2
pop local 2
push local 0
push local 2
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.drawLine 16
push constant 0
pop local 15
push static 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
pop local 15
label IF_FALSE0
push argument 2
push argument 0
sub
call Math.abs 1
pop local 0
push argument 3
push argument 1
sub
call Math.abs 1
pop local 1
push local 0
push constant 0
eq
push local 1
push constant 0
eq
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push argument 0
push argument 2
call Math.min 2
pop local 8
push argument 1
push argument 3
call Math.min 2
pop local 9
push local 1
push constant 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 8
push argument 3
call Screen._locationToAddress 2
pop local 5
push local 8
push constant 16
call Math.modulo 2
pop local 6
push constant 0
pop local 11
push constant 1
neg
pop local 7
label WHILE_EXP0
push local 11
push local 6
eq
not
not
if-goto WHILE_END0
push local 7
push local 11
push static 1
add
pop pointer 1
push that 0
sub
pop local 7
push local 11
push constant 1
add
pop local 11
goto WHILE_EXP0
label WHILE_END0
push local 6
push local 0
add
push constant 17
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 6
push local 0
add
push constant 1
sub
pop local 11
label WHILE_EXP1
push local 11
push constant 15
gt
not
not
if-goto WHILE_END1
push local 7
push local 11
push static 1
add
pop pointer 1
push that 0
sub
pop local 7
push local 11
push constant 1
add
pop local 11
goto WHILE_EXP1
label WHILE_END1
label IF_FALSE3
push local 5
push local 7
call Screen._colorWord 2
pop local 7
push local 5
push local 7
call Memory.poke 2
pop temp 0
push local 6
push local 0
add
push constant 16
gt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 1
neg
push local 15
and
pop local 7
push local 8
push constant 16
add
push local 6
sub
pop local 8
label WHILE_EXP2
push local 8
push argument 0
push argument 2
call Math.max 2
push constant 16
sub
gt
not
not
if-goto WHILE_END2
push local 8
push argument 3
call Screen._locationToAddress 2
pop local 5
push local 5
push local 7
call Memory.poke 2
pop temp 0
push local 8
push constant 16
add
pop local 8
goto WHILE_EXP2
label WHILE_END2
push argument 0
push argument 2
call Math.max 2
pop local 8
push local 8
push argument 3
call Screen._locationToAddress 2
pop local 5
push local 8
push constant 16
call Math.modulo 2
pop local 6
push constant 0
pop local 11
push constant 0
pop local 7
label WHILE_EXP3
push local 11
push local 6
gt
not
not
if-goto WHILE_END3
push local 7
push local 11
push static 1
add
pop pointer 1
push that 0
add
pop local 7
push local 11
push constant 1
add
pop local 11
goto WHILE_EXP3
label WHILE_END3
push local 5
push local 7
call Screen._colorWord 2
pop local 7
push local 5
push local 7
call Memory.poke 2
pop temp 0
label IF_FALSE4
push constant 0
return
label IF_FALSE2
push local 0
push constant 0
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
label WHILE_EXP4
push local 9
push argument 1
push argument 3
call Math.max 2
gt
not
not
if-goto WHILE_END4
push argument 2
push local 9
call Screen.drawPixel 2
pop temp 0
push local 9
push constant 1
add
pop local 9
goto WHILE_EXP4
label WHILE_END4
push constant 0
return
label IF_FALSE5
push constant 0
pop local 12
push constant 0
pop local 13
push constant 0
pop local 2
push argument 0
pop local 8
push argument 1
pop local 9
push constant 1
pop local 3
push constant 1
pop local 4
push argument 0
push argument 2
gt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 1
neg
pop local 3
label IF_FALSE6
push argument 1
push argument 3
gt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 1
neg
pop local 4
label IF_FALSE7
label WHILE_EXP5
push local 12
call Math.abs 1
push local 0
gt
not
push local 13
call Math.abs 1
push local 1
gt
not
or
not
if-goto WHILE_END5
push local 8
push local 12
add
push local 9
push local 13
add
call Screen.drawPixel 2
pop temp 0
push local 2
push constant 0
lt
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push local 12
push local 3
add
pop local 12
push local 2
push local 1
add
pop local 2
goto IF_END8
label IF_FALSE8
push local 13
push local 4
add
pop local 13
push local 2
push local 0
sub
pop local 2
label IF_END8
goto WHILE_EXP5
label WHILE_END5
push constant 0
return
function Screen.drawRectangle 1
push argument 1
pop local 0
label WHILE_EXP0
push local 0
push argument 3
gt
not
not
if-goto WHILE_END0
push argument 0
push local 0
push argument 2
push local 0
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 3
push constant 181
push argument 2
call Math.min 2
pop argument 2
push argument 2
neg
pop local 2
label WHILE_EXP0
push local 2
push argument 2
gt
not
not
if-goto WHILE_END0
push argument 2
push argument 2
call Math.multiply 2
push local 2
push local 2
call Math.multiply 2
sub
call Math.sqrt 1
pop local 1
push argument 1
push local 2
add
push constant 0
push constant 255
call Math.constrain 3
pop local 0
push argument 0
push local 1
add
push local 0
push argument 0
push local 1
sub
push local 0
call Screen.drawLine 4
pop temp 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push constant 0
return

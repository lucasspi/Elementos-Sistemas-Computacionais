// This file is part of www.nand2tetris.
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static Array ram;
	static Array freeList;
	static int HEAP_BASE_ADDR;
	static int HEAP_SIZE;

    /** Initializes the class. */
    function void init() {
		let HEAP_BASE_ADDR = 2048;
		let HEAP_SIZE = 14435;
		
		let ram = 0;
		let freeList = HEAP_BASE_ADDR;
		let freeList[0] = HEAP_SIZE - 2;
		let freeList[1] = null;
		
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var Array block;
		var Array lastBlock;
		
		let block = freeList;
		
		while(size > block[0]){
			if(block[1] = null){
				do Sys.halt();  // No block of given size available.
			}
			let block = block[1];
		}
		
		let lastBlock = block;
		
		if(~(block[0] = size)){
			let block = block + block[0] - size;
			let block[0] = size;
			let lastBlock[0] = lastBlock[0] - (size + 2);
			let lastBlock[1] = null;
		}
		
		return block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var Array segment;
		var Array t;
		
		let segment = o - 2;
		
		let t = freeList;
		while(~(t[1] = null)){
			let t = t[1];
		}
		let t[1] = segment;
		
		return;
    }    
}

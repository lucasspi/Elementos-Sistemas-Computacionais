class Dino{
	field int x;
	field int currentHeight;
	field int jumpStrength;
	field int weight;

	field boolean jumping;
	field boolean goingUp;
	field int currentJumpSpeed;

	field int GROUND_HEIGHT;
	field int DINO_HEIGHT;
	field int DINO_WIDTH;

	constructor Dino new(int startX, int groundHeight, int jStrength, int weight_){
		let GROUND_HEIGHT = groundHeight;
		let DINO_HEIGHT = 16;
		let DINO_WIDTH = 16;

		let x = startX;
		let currentHeight = groundHeight - DINO_HEIGHT - 1;
		let jumpStrength = jStrength;
		let weight = weight_;

		let jumping = false;
		let goingUp = false;
		let currentJumpSpeed = 0;

		do draw();
		return this;
	}

	method void dispose(){
		do Memory.deAlloc(this);
		return;
	}

	method void draw() {
		var int memAddress;
		let memAddress = 16384 + Utility.xyToScreenMap(x, currentHeight);

		if((memAddress > 16383) & (memAddress < 24576)){
			do Memory.poke(memAddress+0, 32256);
			do Memory.poke(memAddress+32, -768);
			do Memory.poke(memAddress+64, -256);
			do Memory.poke(memAddress+96, -256);
			do Memory.poke(memAddress+128, 3840);
			do Memory.poke(memAddress+160, 32512);
			do Memory.poke(memAddress+192, 1921);
			do Memory.poke(memAddress+224, 8129);
			do Memory.poke(memAddress+256, 6135);
			do Memory.poke(memAddress+288, 2047);
			do Memory.poke(memAddress+320, 2046);
			do Memory.poke(memAddress+352, 1020);
			do Memory.poke(memAddress+384, 496);
			do Memory.poke(memAddress+416, 432);
			do Memory.poke(memAddress+448, 272);
			do Memory.poke(memAddress+480, 816);
		}

		return;
	}

	method void erase() {
		var int memAddress;
		let memAddress = 16384 + Utility.xyToScreenMap(x, currentHeight);

		if((memAddress > 16383) & (memAddress < 24576)){
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 0);
			do Memory.poke(memAddress+64, 0);
			do Memory.poke(memAddress+96, 0);
			do Memory.poke(memAddress+128, 0);
			do Memory.poke(memAddress+160, 0);
			do Memory.poke(memAddress+192, 0);
			do Memory.poke(memAddress+224, 0);
			do Memory.poke(memAddress+256, 0);
			do Memory.poke(memAddress+288, 0);
			do Memory.poke(memAddress+320, 0);
			do Memory.poke(memAddress+352, 0);
			do Memory.poke(memAddress+384, 0);
			do Memory.poke(memAddress+416, 0);
			do Memory.poke(memAddress+448, 0);
			do Memory.poke(memAddress+480, 0);
		}
		return;
	}

	method boolean isJumping(){
		return jumping;
	}

	method void increaseJumpStrength(){
		let jumpStrength = jumpStrength + 1;
		return;
	}

	method void decreaseJumpStrength(){
		let jumpStrength = jumpStrength - 1;
		return;
	}

	method void increaseWeight(){
		let weight = weight + 1;
		return;
	}

	method void decreaseWeight(){
		if(weight > 1){
			let weight = weight - 1;
		}
		return;
	}

	method boolean isHit(Cactus c){
		var boolean hit;
		var int cX;
		var int cY;
		var int cWidth;
		var int cHeight;

		let hit = false;
		let cX = c.getCurrentPosition();
		let cY = GROUND_HEIGHT - c.getHeight();
		let cWidth = c.getWidth();
		let cHeight = c.getHeight();

		if((x < (cX+cWidth)) &
      		((x+DINO_WIDTH) > cX) &
			(currentHeight < (cY+cHeight)) &
			((currentHeight+DINO_HEIGHT) > cY)){
			let hit = true;
		}

		return hit;
	}

	method void startJump(){
		if(~jumping){
			let jumping = true;
			let goingUp = true;
			let currentJumpSpeed = jumpStrength;
		}
		return;
	}

	method void handleJump(){
		do erase();

		if(goingUp){
			let currentHeight = currentHeight - currentJumpSpeed;
			let currentJumpSpeed = currentJumpSpeed - weight;
		}
		else{
			let currentHeight = currentHeight + currentJumpSpeed;
			let currentJumpSpeed = currentJumpSpeed + weight;
		}

		if(currentJumpSpeed = 0){
			let goingUp = false;
		}
		if(currentHeight > (GROUND_HEIGHT - DINO_HEIGHT - 1)){
			let currentHeight = GROUND_HEIGHT - DINO_HEIGHT - 1;
			let jumping = false;
			let currentJumpSpeed = 0;
		}

		do draw();

		return;
	}

}

class DinoRunGame{

	field Dino dino;
	field int gameSpeed;
	field int score;
	field boolean gOver;
	
	field Array cactuses;
	field int n_cactuses;
	
	field int GROUND_HEIGHT;
	field int GAME_FPS;
	field int MAX_OBSTACLES;
	
	field int CACTUS_HEIGHT;
	field int CACTUS_WIDTH;
	
	field int DINO_X;
	field int DINO_START_WEIGHT;
	field int DINO_START_JSTRENGTH;
	
	constructor DinoRunGame new(int startGameSpeed){
	
		let GROUND_HEIGHT = 200;
		let GAME_FPS = 30;
		let MAX_OBSTACLES = 10;
		
		let CACTUS_HEIGHT = 16;
		let CACTUS_WIDTH = 30;
		
		let DINO_X = 50;
		let DINO_START_JSTRENGTH = 10;
		let DINO_START_WEIGHT = 1;
		
	
		let dino = Dino.new(DINO_X, GROUND_HEIGHT, DINO_START_JSTRENGTH, DINO_START_WEIGHT);
		let gameSpeed = startGameSpeed;
		let score = 0;
		let gOver = false;
		
		let cactuses = Array.new(MAX_OBSTACLES);
		let n_cactuses = 0;
		
		do newObstacle();
		
		do Output.moveCursor(0, 25);
		do Output.printString("SCORE: ");
		do Output.printInt(score);
		
		return this;
	}
	
	method void dispose(){
		do dino.dispose();

		do Memory.deAlloc(this);
		
		return;
	}
	
	method void gameOver(){
		do Output.moveCursor(12, 25);
		do Output.printString("GAME OVER");
		do Output.println();
		
		return;
	}
	
	method void cycleObstacle(){
		var Cactus c;
		var int n;
		let n = 0;
		
		let c = cactuses[0];
		do c.dispose();
		
		while(~(n = n_cactuses - 1)){
			let cactuses[n] = cactuses[n+1];
			let n = n + 1;
		}
		let cactuses[n] = null;
		
		let n_cactuses = n_cactuses - 1;
		
		do newObstacle();
		return;
	}
	
	method void drawGround(){
		do Screen.setColor(true);
		do Screen.drawLine(0, GROUND_HEIGHT, 511, GROUND_HEIGHT);
		
		return;
	}
	
	method void newObstacle(){
		if(n_cactuses < MAX_OBSTACLES){
			let cactuses[n_cactuses] = Cactus.new(CACTUS_WIDTH, CACTUS_HEIGHT, GROUND_HEIGHT);
			let n_cactuses = n_cactuses + 1;
		}
		
		return;
	}
	
	method void handleGame(){
		var Cactus c;
		var int n;
		var boolean cycle;
		var int backspaces;
		
		let n = 0;
		let cycle = false;
		
		while(~(n = n_cactuses)){
			let c = cactuses[n];
			do c.move(gameSpeed);
			
			if(c.getCurrentPosition() = 0){
				let cycle = true;
				do c.erase();
			}
			
			let n = n + 1;
		}
		
		if(cycle){
			do cycleObstacle();
			let score = score + 1;
			
			if(score < 101){
				let backspaces = 2;
			}
			
			if(score < 11){
				let backspaces = 1;
			}
			
			while(backspaces > 0){
				do Output.backSpace();
				let backspaces = backspaces - 1;
			}
			do Output.printInt(score);
			
			if(Utility.modulo(score, 2) = 0){			
				let gameSpeed = gameSpeed + 1;
			}
		}
	
		if(dino.isJumping()){
			do dino.handleJump();
		}
		let c = cactuses[0];
		
		if(dino.isHit(c)){
			let gOver = true;
		}
		
		do Sys.wait(1000/GAME_FPS); // 30 FPS
		return;
	}
	
	method void run(){
		var char key;
		var boolean exit;
		
		let exit = false;
		
		do drawGround();
		
		do Output.moveCursor(9, 25);
		do Output.printString("SPACEBAR");
		while(~(key = 32)){
			let key = Keyboard.keyPressed();		
		}
		do Output.moveCursor(9, 25);
		do Output.printString("        ");
		
		do Output.moveCursor(0, 32);
		do Output.printInt(0);
		
		while(~exit){
		
			while((key = 0) & (~exit)){
				let key = Keyboard.keyPressed();
				do handleGame();
				if(gOver){
					do gameOver();
					let exit = true;
				}
			}
			
			if(key = 140){   // ESC
				let exit = true;
			}
			
			if(key = 32){   // spacebar
				do dino.startJump();
			}
			
			if(key = 131){
				do dino.increaseJumpStrength();
			}
			
			if(key = 133){
				do dino.decreaseJumpStrength();
			}
			
			if(key = 87){   // W
				do dino.increaseWeight();
			}
			
			if(key = 83){   // S
				do dino.decreaseWeight();
			}
			
			if(key = 73){   // I
				let gameSpeed = gameSpeed + 1;
			}
			
			if(key = 75){   // K
				let gameSpeed = Math.max(gameSpeed - 1, 1);
			}
			
			if(key = 65){   // C
				do newObstacle();
			}
			
			while (~(key = 0) & (~exit)) {
				let key = Keyboard.keyPressed();
				do handleGame();
				if(gOver){
					do gameOver();
					let exit = true;
				}
			}
			
		}
		
		return;
	}

}
